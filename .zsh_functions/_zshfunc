#!/usr/bin/zsh
 
extract() {
   case $1 in
       *.tar.bz2)  tar xjf $1      ;;
       *.tar.gz)   tar xzf $1      ;;
       *.bz2)      bunzip2 $1      ;;
       *.gz)       gunzip $1       ;;
       *.tar)      tar xf $1       ;;
       *.tbz2)     tar xjf $1      ;;
       *.tgz)      tar xzf $1      ;;
       *.zip)      unzip $1        ;;
       *.7z)       7z x $1         ;; # require p7zip
       *.rar)      7z x $1         ;; # require p7zip
       *.iso)      7z x $1         ;; # require p7zip
       *.Z)        uncompress $1   ;;
       *)          echo "'$1' cannot be extracted" ;;
   esac
}

matrix1() {
echo -e "\e[1;40m" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;sleep 0.05; done|gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

matrix2() {
echo -e "\e[1;40m" ; clear ; characters=$( jot -c 94 33 | tr -d '\n' ) ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;sleep 0.05; done|gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

matrix3() {
echo -e "\e[1;40m" ; clear ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $( printf "\U$(( $RANDOM % 500 ))" ) ;sleep 0.05; done|gawk '{c=$4; letter=$4;a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}

zshcomp() {
    for command completion in ${(kv)_comps:#-*(-|-,*)}; do
        printf "%-32s %s\n" $command $completion
    done | sort
}

back() {
    for file in "$@"; do
        cp "$file" "$file".bak
    done
}

jrnl() {
    cd "$JRNL" && nano +Jrnl
}

#CPAN/M completion function
export ZPWR_CPAN_MIN_PREFIX=2

function __cpan_single_module() {

    local name tarball

    for (( ; i <= $#searchLines; ++i )); do
        package=$searchLines[$i]
        if [[ $package == (#b)(Module[[:space:]]##id[[:space:]]##=[[:space:]]##)([^[:space:]]##)* ]]; then
            name="${match[2]//:/\\:}"
        fi
        if [[ $package == (#b)([[:space:]]##CPAN_FILE[[:space:]]##)([^[:space:]]##)* ]]; then
            tarball="${match[2]//:/\\:}"
        fi

        if [[ -n $name && -n $tarball ]]; then
            ary+=("$name:$tarball")
            break
        fi

    done

    if (( $#ary )); then
        _describe -t cpan-module 'CPAN modules' ary
    fi
}

function __cpan_multiple_modules () {

    local name tarball

    local cpan_cache_file
    local -a tmp_ary
    cpan_cache_file="cpan_${PREFIX}_cache"

    if ! _retrieve_cache $cpan_cache_file; then
        for (( ; i <= $#searchLines; ++i )); do
            package=$searchLines[$i]
            if [[ $package == (#b)(Module[[:space:]]##\<[[:space:]]##)([^[:space:]]##)[[:space:]]##([^[:space:]]##)* ]]; then
                name="${match[2]//:/\\:}"
                tarball="${match[3]//:/\\:}"
                tmp_ary+=("$name:$tarball")
            fi
        done
        if (( $#tmp_ary )); then
            _store_cache $cpan_cache_file tmp_ary
        fi
    fi

    _describe -t cpan-module 'CPAN modules' tmp_ary
}

function __cpan_modules() {

    local ary searchLines package

    searchLines=("${(f@)$(perl -MCPAN -e 'CPAN::Shell->m("/'$1'/")' 2>/dev/null)}")

    for (( i = 1; i <= $#searchLines; ++i )); do
        package=$searchLines[$i]
        if [[ $package == (#b)(Module[[:space:]]##id[[:space:]]##=[[:space:]]##)([^[:space:]]##)* ]]; then
            ((--i))
            __cpan_single_module
            return 0
        elif [[ $package == (#b)(Module[[:space:]]##\<[[:space:]]##)([^[:space:]]##)[[:space:]]##([^[:space:]]##)* ]]; then
            ((--i))
            __cpan_multiple_modules
            return 0
        fi
    done

    unset i

}

0="${${0:#$ZSH_ARGZERO}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"

# Colors for Man pages:
# termcap
# ks       make the keypad send commands
# ke       make the keypad send digits
# vb       emit visual bell
# mb       start blink
# md       start bold
# me       turn off bold, blink and underline
# so       start standout (reverse video)
# se       stop standout
# us       start underline
# ue       stop underline

function man() {
	env \
		LESS_TERMCAP_md=$(tput bold; tput setaf 4) \
		LESS_TERMCAP_me=$(tput sgr0) \
		LESS_TERMCAP_mb=$(tput blink) \
		LESS_TERMCAP_us=$(tput setaf 2) \
		LESS_TERMCAP_ue=$(tput sgr0) \
		LESS_TERMCAP_so=$(tput smso) \
		LESS_TERMCAP_se=$(tput rmso) \
		PAGER="${commands[less]:-$PAGER}" \
		man "$@"
}
